{"version":3,"sources":["services/firebase.ts","contexts/AuthContext.tsx","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","assets/images/logo.svg","components/Button.tsx","components/Question/index.tsx","assets/images/copy.svg","components/RoomCode.tsx","hooks/useAuth.ts","hooks/useRoom.ts","pages/AdminRoom.tsx","assets/images/google-icon.svg","assets/images/illustration.svg","pages/Home.tsx","pages/NewRoom.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","props","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","Button","isOutlined","className","Question","content","author","isAnswered","isHighLighted","cx","answered","highlighted","src","alt","RoomCode","onClick","navigator","clipboard","writeText","code","copyImg","useAuth","useContext","useRoom","roomId","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","likeCount","values","likes","length","likeId","find","authorId","off","AdminRoom","history","useHistory","useParams","update","endedAt","Date","push","questionId","window","confirm","remove","logoImg","question","type","handleCheckQuestionAsAnswered","checkImg","handleHighLightQuestion","answerImg","handleDeleteQuestion","deleteImg","Home","roomCode","setRoomCode","event","preventDefault","trim","get","exists","alert","illustration","logo","googleIcon","onSubmit","onChange","target","placeholder","NewRoom","newRoom","setNewRoom","firebaseRoom","to","Room","params","newQuestion","setNewQuestion","isHightLighted","disabled","handleLikeQuestion","aria-label","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02e3882f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst database = firebase.database();\n\nexport { firebase, auth, database }\n\n","import firebase from 'firebase/app';\nimport React, { createContext, ReactNode, useEffect, useState } from 'react'\nimport { auth } from '../services/firebase';\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n}\n\ntype AuthContextType = {\n    user: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n\ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\nexport function AuthContextProvider(props: AuthContextProviderProps) {\n    const [user, setUser] = useState<User>()\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                const { displayName, photoURL, uid } = user;\n\n                if (!displayName || !photoURL) {\n                    throw new Error('Missing information from Google Account.')\n                }\n\n                setUser({\n                    id: uid,\n                    name: displayName,\n                    avatar: photoURL,\n                });\n            }\n        })\n\n        return () => {\n            unsubscribe();\n        }\n    }, [])\n\n    async function signInWithGoogle() {\n        const provider = new firebase.auth.GoogleAuthProvider();\n\n        const result = await auth.signInWithPopup(provider);\n\n        if (result.user) {\n            const { displayName, photoURL, uid } = result.user;\n\n            if (!displayName || !photoURL) {\n                throw new Error('Missing information from Google Account.')\n            }\n\n            setUser({\n                id: uid,\n                name: displayName,\n                avatar: photoURL,\n            });\n        }\n    }\n\n\n    return (\n        <AuthContext.Provider value={{ user, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","import { ButtonHTMLAttributes } from \"react\";\nimport \"../styles/button.scss\"\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n    isOutlined?: boolean;\n};\n\nexport function Button({ isOutlined = false, ...props }: ButtonProps) {\n    return (\n        <button className={`button ${isOutlined ? 'outlined' : ''}`} {...props} />\n    );\n}","import { ReactNode } from 'react';\nimport cx from 'classnames';\nimport './styles.scss';\n\ntype QuestionProps = {\n    content: string;\n    author: {\n        name: string;\n        avatar: string;\n    }\n    children?: ReactNode;\n    isAnswered?: boolean;\n    isHighLighted?: boolean;\n}\n\nexport function Question({ content, author, children, isAnswered = false, isHighLighted = false }: QuestionProps) {\n    return (\n        <div className={cx(\n            'question',\n            { answered: isAnswered },\n            { highlighted: isHighLighted && !isAnswered },\n        )}>\n            <p>{content}</p>\n            <footer>\n                <div className=\"user-info\">\n                    <img src={author.avatar} alt={author.name} />\n                    <span>{author.name}</span>\n                </div>\n                <div>{children}</div>\n            </footer>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from \"../assets/images/copy.svg\";\nimport \"../styles/room-code.scss\";\n\n\ninterface RoomCodeProps {\n    code: string;\n}\n\nexport function RoomCode(props: RoomCodeProps) {\n    function copyRoomCodeToClipboard() {\n        navigator.clipboard.writeText(props.code);\n    }\n\n    return (\n        <button className=\"room-code\" onClick={copyRoomCodeToClipboard}>\n            <div>\n                <img src={copyImg} alt=\"Copy room code\" />\n            </div>\n            <span>Room #{props.code}</span>\n        </button>\n    );\n}","import { useContext } from 'react';\nimport { AuthContext } from './../contexts/AuthContext';\n\nexport function useAuth() {\n    const value = useContext(AuthContext);\n\n    return value;\n}","import { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\n\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string;\n        avatar: string;\n    }\n    content: string\n    isAnswered: boolean;\n    isHighLighted: boolean;\n    likes: Record<string, {\n        authorId: string;\n    }>\n}>\n\ntype QuestionType = {\n    id: string;\n    content: string\n    author: {\n        name: string;\n        avatar: string;\n    }\n    isHighLighted: boolean;\n    isAnswered: boolean;\n    likeCount: number;\n    likeId: string | undefined;\n}\n\n\nexport function useRoom(roomId: string) {\n    const { user } = useAuth();\n    const [questions, setQuestions] = useState<QuestionType[]>([]);\n    const [title, setTitle] = useState('');\n\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`);\n\n        roomRef.on('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => ({\n                ...value,\n                id: key,\n                likeCount: Object.values(value.likes ?? {}).length,\n                likeId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0]\n            }));\n\n            setTitle(databaseRoom.title);\n            setQuestions(parsedQuestions);\n        })\n\n        return () => {\n            roomRef.off('value');\n        }\n\n    }, [roomId, user?.id])\n\n    return { questions, title, }\n}\n","import React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport deleteImg from '../assets/images/delete.svg';\nimport checkImg from '../assets/images/check.svg'\nimport answerImg from '../assets/images/answer.svg'\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from \"../services/firebase\";\nimport '../styles/room.scss';\n\ninterface RoomParams {\n    id: string;\n}\n\nexport function AdminRoom() {\n    const history = useHistory();\n    const params = useParams<RoomParams>();\n    const roomId = params.id;\n\n    const { questions, title } = useRoom(roomId);\n\n    async function handleEndRoom() {\n        database.ref(`rooms/${roomId}`).update({\n            endedAt: new Date(),\n        });\n\n        history.push('/')\n    }\n\n    async function handleDeleteQuestion(questionId: string) {\n        if (window.confirm('Are you sure you want delete this question?')) {\n            await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n        }\n    }\n\n    async function handleCheckQuestionAsAnswered(questionId: string) {\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n            isAnswered: true,\n        });\n    }\n\n    async function handleHighLightQuestion(questionId: string) {\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n            isHighLighted: true,\n        });\n    }\n\n    return (\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"Letmeask\" />\n                    <div>\n                        <RoomCode code={roomId} />\n                        <Button onClick={handleEndRoom} isOutlined>Delete room</Button>\n                    </div>\n                </div>\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Room {title}</h1>\n                    {questions.length > 0 && <span>{questions.length} question(s)</span>}\n                </div>\n\n                <div className=\"question-list\">\n                    {questions.map(question => {\n                        return <Question content={question.content} author={question.author} key={question.id} isAnswered={question.isAnswered} isHighLighted={question.isHighLighted}>\n                            {!question.isAnswered && (\n                                <>\n                                    <button type=\"button\" onClick={() => handleCheckQuestionAsAnswered(question.id)}>\n                                        <img src={checkImg} alt=\"Check question as answered\" />\n                                    </button>\n                                    <button type=\"button\" onClick={() => handleHighLightQuestion(question.id)}>\n                                        <img src={answerImg} alt=\"Highlight question\" />\n                                    </button>\n                                </>\n                            )}\n                            <button type=\"button\" onClick={() => handleDeleteQuestion(question.id)}>\n                                <img src={deleteImg} alt=\"Remover question\" />\n                            </button>\n                        </Question>\n                    })}\n                </div>\n            </main>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","import React, { FormEvent, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport googleIcon from \"../assets/images/google-icon.svg\";\nimport illustration from \"../assets/images/illustration.svg\";\nimport logo from \"../assets/images/logo.svg\";\nimport { Button } from \"../components/Button\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { database } from \"../services/firebase\";\nimport '../styles/auth.scss';\n\nexport function Home() {\n    const history = useHistory();\n    const { user, signInWithGoogle } = useAuth();\n    const [roomCode, setRoomCode] = useState('');\n\n    async function handleCreateRoom() {\n        if (!user) {\n            await signInWithGoogle();\n        }\n\n        history.push('/rooms/new');\n    }\n\n    async function handleJoinRoom(event: FormEvent) {\n        event.preventDefault();\n\n        if (roomCode.trim() === '') return;\n\n        const roomRef = await database.ref(`rooms/${roomCode}`).get();\n\n        if (!roomRef.exists()) {\n            alert('Room does not exists.')\n            return;\n        }\n\n        if (roomRef.val().endedAt) {\n            alert('Room already closed.');\n            return;\n        }\n\n        history.push(`/rooms/${roomCode}`);\n    }\n\n    return (\n        <div id='page-auth'>\n            <aside>\n                <img src={illustration} alt=\"Symbolic illustration referring questions and answers\" />\n                <strong>Create Q&amp;A rooms in live</strong>\n                <p>Take out the audience doubts in real time</p>\n            </aside>\n            <main>\n                <div className=\"main-content\">\n                    <img src={logo} alt=\"Let me ask\" />\n                    <button onClick={handleCreateRoom} className=\"create-room\">\n                        <img src={googleIcon} alt=\"Google Logo\" />\n                        Create a room with Google account\n                    </button>\n                    <div className=\"separator\">or get into a room</div>\n                    <form onSubmit={handleJoinRoom}>\n                        <input onChange={event => setRoomCode(event.target.value)} value={roomCode} type=\"text\" placeholder=\"Enter with a room code\" />\n                        <Button type=\"submit\">Enter in the room</Button>\n                    </form>\n                </div>\n            </main>\n        </div>\n    );\n}","import React, { FormEvent, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport illustration from \"../assets/images/illustration.svg\";\nimport logo from \"../assets/images/logo.svg\";\nimport { Button } from \"../components/Button\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { database } from \"../services/firebase\";\nimport '../styles/auth.scss';\n\nexport function NewRoom() {\n    const { user } = useAuth();\n    const history = useHistory();\n    const [newRoom, setNewRoom] = useState('')\n\n    async function handleCreateRoom(event: FormEvent) {\n        event.preventDefault();\n\n        if (!newRoom.trim()) return;\n\n        const roomRef = database.ref('rooms');\n\n        const firebaseRoom = await roomRef.push({\n            title: newRoom,\n            authorId: user?.id,\n        });\n\n        history.push(`/rooms/${firebaseRoom.key}`);\n    }\n\n    return (\n        <div id='page-auth'>\n            <aside>\n                <img src={illustration} alt=\"Symbolic illustration referring questions and answers\" />\n                <strong>Create Q&amp;A rooms in live</strong>\n                <p>Take out the audience doubts in real time</p>\n            </aside>\n            <main>\n                <div className=\"main-content\">\n                    <img src={logo} alt=\"Let me ask\" />\n                    <h2>Create a new room</h2>\n                    <form onSubmit={handleCreateRoom}>\n                        <input onChange={event => setNewRoom(event.target.value)} value={newRoom} type=\"text\" placeholder=\" Room name\" />\n                        <Button type=\"submit\">Create new room</Button>\n                    </form>\n                    <p>Would you like to access a created room? <Link to=\"/\">Click here</Link></p>\n                </div>\n            </main>\n        </div>\n    );\n}","import React, { FormEvent, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from \"../assets/images/logo.svg\";\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Question';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\n\ninterface RoomParams {\n    id: string;\n}\n\nexport function Room() {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n    const roomId = params.id;\n\n    const { questions, title } = useRoom(roomId);\n\n    async function handleSendQuestion(event: FormEvent) {\n        event.preventDefault();\n        if (newQuestion.trim() === '') return;\n\n        if (!user) throw new Error('You must be logged in')\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar,\n            },\n            isHightLighted: false,\n            isAnswered: false,\n        };\n\n        await database.ref(`rooms/${roomId}/questions`).push(question);\n\n        setNewQuestion('');\n    }\n\n    async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\n        if (likeId) {\n            await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove();\n        } else {\n            await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\n                authorId: user?.id,\n            });\n        }\n    }\n\n    return (\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"Letmeask\" />\n                    <RoomCode code={roomId} />\n                </div>\n            </header>\n\n            <main>\n                <div className=\"room-title\">\n                    <h1>Room {title}</h1>\n                    {questions.length > 0 && <span>{questions.length} question(s)</span>}\n                </div>\n\n                <form onSubmit={handleSendQuestion}>\n                    <textarea onChange={event => setNewQuestion(event.target.value)} value={newQuestion} placeholder=\"What you want to ask?\" />\n\n                    <div className=\"form-footer\">\n                        {user ? (\n                            <div className=\"user-info\">\n                                <img src={user.avatar} alt={user.name} />\n                                <span>{user.name}</span>\n                            </div>\n                        ) : (\n                            <span><button>Log in</button> to make a question.</span>\n                        )}\n\n                        <Button disabled={!user} type=\"submit\">Send question</Button>\n                    </div>\n                </form>\n\n                <div className=\"question-list\">\n                    {questions.map(question => {\n                        return <Question content={question.content} author={question.author} key={question.id} isAnswered={question.isAnswered} isHighLighted={question.isHighLighted}>\n                            {!question.isAnswered && (\n                                <button onClick={() => handleLikeQuestion(question.id, question.likeId)} className={`like-button ${question.likeId ? 'liked' : ''}`} type=\"button\" aria-label=\"Mark  as liked\">\n                                    {question.likeCount > 0 && <span>{question.likeCount}</span>}\n                                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                                    </svg>\n                                </button>\n                            )}\n                        </Question>\n                    })}\n                </div>\n            </main>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { AuthContextProvider } from \"./contexts/AuthContext\";\nimport { AdminRoom } from \"./pages/AdminRoom\";\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { Room } from \"./pages/Room\";\n\nfunction App() {\n  return (\n    <Router>\n      <AuthContextProvider>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/rooms/new\" component={NewRoom} />\n          <Route path=\"/rooms/:id\" component={Room} />\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom} />\n        </Switch>\n      </AuthContextProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./services/firebase\";\nimport  \"./styles/global.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}